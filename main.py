# from configs.models import test_demo
# from mysql_db_schema import schema
# from langchain_groq import ChatGroq
# from crewai import Agent, Task, Crew, Process
# import os
# from dotenv import load_dotenv
# load_dotenv()


# # Define task
# generate_task = Task(
#     description=f"""
#             Schema: {schema}.
#             userQuestion: {question}.
#             Generate an SQL query based on the userQuestion and pastResult while strictly adhering to the following rules:

#             DO:
#             - Use the exact name of tables and properties, they MUST be exactly the same in the query as in the schema.
#             - ALWAYS look at the tables and tables' properties in the database schema to see what you can query.
#             - Use only the column names you can see existing in the tables.
#             - Pay attention to which column is in which table.
#             - Naming table must be unique.
#             - ALWAYS use 'LIMIT' function to limit the out to 20 rows.
#             - Use function to get the current date, if the question involves "today".
#             - If there are tables need to be joined, you always use 'JOIN' function to join tables.
#             - Query only the columns that are needed to answer the user question.
#             - Unless the user specifies in the question specific columns to obtain, display for at most 5 significant columns.
#             - The order of the results to return the most informative data in the database. The schema's primary key(s) must always be used in SELECT query.
#             - When 'GROUP BY', specifically check if enough essential columns
#             - Return SQL query ONLY.
#             Do NOT skip this step.

#             Do NOT:
#             - Query for columns or properties that do not exist.
#             - Make or generate any DML statements (INSERT, UPDATE, DELETE, DROP etc.) to the database.
#             - Use SQL subquery.
#             - Change the table's name.
#             - Use columns that not belong to table
#             - Use SELECT *.
#             - Use 'TOP 1'.
#             - Duplicate table names.
#             - Return any values beside the SQL query.
#             Do NOT skip this step.
#         """,
#     agent=generate_agent,
#     expected_output="""
#             An optimal and syntactically correct SQL query to retrieve relevant information from the database schema based on the content of the user input.
#             Only the SQL query is returned. Nothing other than the SQL query is returned.
#         """
# )
# extract_task = Task(
#     description="""
#             Strictly adhering to the following rules:
#                 - Receive the output from 'generator' agent and extract ONLY the SQL queries code block.
#                 - Place the SQL queries code block inside this format ```sql ```.
#                 - Below the ```sql ``` is the explaination for the SQL queries code block.
#                 Do NOT skip this step.
#         """,
#     agent=extract_agent,
#     expected_output="""
#             SQL queries code block generated by 'generator' agent in this ```sql ``` format.
#             With SQL queries code block exaplaination.
#         """,
#     context=[generate_task]
# )

# # Define crew
# crew = Crew(
#     agents=[generate_agent, extract_agent],
#     tasks=[generate_task, extract_task],
#     verbose=2,
#     process=Process.sequential
# )


# # Kickoff the process and return the result
# output = crew.kickoff()
# print(">>> Raw query:\n", generate_task.output.raw_output)
# print("\n>>> Query and Explaination:\n", output)

from crewai import Crew, Process
from configs.agents import PoemGenerateAgent
from configs.tasks import PoemGenerateTasks

# user_specs = "Generate a short classic English poem about love based on the season Winter."
user_specs = "Generate a haiku poem about love based on the season Spring. In haiku poem format."

# Initialize Agents and Tasks
agents = PoemGenerateAgent()
tasks = PoemGenerateTasks()
# Create Agents
poem_generate_agent = agents.poem_generate_agent()
# Create Tasks
poem_generate_task = tasks.poem_generate_task(poem_generate_agent, user_specs)
# Create Crew for poem generation
poem_crew = Crew(
    agents=[poem_generate_agent],
    tasks=[poem_generate_task],
    verbose=True,
    process=Process.sequential
)

if __name__ == "__main__":
    print(">>> Program starts!")
    poem = poem_crew.kickoff()
    print(">>> Answer:")
    print(poem)
    # # Define user question, must be precise
    # question = "List popular Electronics products"
