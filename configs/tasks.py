from crewai import Task
from textwrap import dedent


class MySQLGenerateTasks:
    def mysql_generate_task(self, agent, db_specs, user_specs):
        return Task(
            description=dedent(f"""\
                Analyze the given user specifications: {user_specs}.
                Focus on identifying unique features and the overall narrative presented.
                
                Generate a poem based on the analyzed user specifications.
                Your poem must be elegant, informative and exciting to the reader.
                
                The final result is ONLY the poem, no yapping."""),
            expected_output=dedent("""\
                Display the poem based on the user specifications.
                If there aren't any specifications, display the poem in paragraphs with spaces between."""),
            agent=agent
        )



# # Define task
# generate_task = Task(
#     description=f"""
#             Schema: {schema}.
#             userQuestion: {question}.
#             Generate an SQL query based on the userQuestion and pastResult while strictly adhering to the following rules:

#             DO:
#             - Use the exact name of tables and properties, they MUST be exactly the same in the query as in the schema.
#             - ALWAYS look at the tables and tables' properties in the database schema to see what you can query.
#             - Use only the column names you can see existing in the tables.
#             - Pay attention to which column is in which table.
#             - Naming table must be unique.
#             - ALWAYS use 'LIMIT' function to limit the out to 20 rows.
#             - Use function to get the current date, if the question involves "today".
#             - If there are tables need to be joined, you always use 'JOIN' function to join tables.
#             - Query only the columns that are needed to answer the user question.
#             - Unless the user specifies in the question specific columns to obtain, display for at most 5 significant columns.
#             - The order of the results to return the most informative data in the database. The schema's primary key(s) must always be used in SELECT query.
#             - When 'GROUP BY', specifically check if enough essential columns
#             - Return SQL query ONLY.
#             Do NOT skip this step.

#             Do NOT:
#             - Query for columns or properties that do not exist.
#             - Make or generate any DML statements (INSERT, UPDATE, DELETE, DROP etc.) to the database.
#             - Use SQL subquery.
#             - Change the table's name.
#             - Use columns that not belong to table
#             - Use SELECT *.
#             - Use 'TOP 1'.
#             - Duplicate table names.
#             - Return any values beside the SQL query.
#             Do NOT skip this step.
#         """,
#     agent=generate_agent,
#     expected_output="""
#             An optimal and syntactically correct SQL query to retrieve relevant information from the database schema based on the content of the user input.
#             Only the SQL query is returned. Nothing other than the SQL query is returned.
#         """
# )
# extract_task = Task(
#     description="""
#             Strictly adhering to the following rules:
#                 - Receive the output from 'generator' agent and extract ONLY the SQL queries code block.
#                 - Place the SQL queries code block inside this format ```sql ```.
#                 - Below the ```sql ``` is the explaination for the SQL queries code block.
#                 Do NOT skip this step.
#         """,
#     agent=extract_agent,
#     expected_output="""
#             SQL queries code block generated by 'generator' agent in this ```sql ``` format.
#             With SQL queries code block exaplaination.
#         """,
#     context=[generate_task]
# )